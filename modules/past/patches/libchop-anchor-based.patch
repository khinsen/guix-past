Backport fixes from today's libchop that address a segfault in the
anchor-based chopper.

--- libchop-0.0.2006-0.feb8f6b-checkout/src/chopper-anchor-based.c	2020-04-27 14:42:38.288651112 +0200
+++ libchop/src/chopper-anchor-based.c	2011-04-07 00:12:41.000000000 +0200
@@ -12,10 +29,14 @@
        In Proceedings of the Usenix Winter 1994 Conference, pages 1--10,
        January, 1994, http://www.cs.arizona.edu/research/reports.html.  */
 
+#include <chop/chop-config.h>
+
+#include <alloca.h>
+
 #include <chop/chop.h>
 #include <chop/choppers.h>
-#include <chop/chop-config.h>
 
+#include <string.h>
 #include <stdint.h>
 #include <assert.h>
 #include <alloca.h>
@@ -36,9 +57,9 @@
 {
   size_t window_size;        /* size of the sliding window */
   size_t raw_size;           /* 2 * WINDOW_SIZE */
-  char *raw_window;          /* pointer to RAW_SIZE bytes pointed to by the
+  uint8_t *raw_window;          /* pointer to RAW_SIZE bytes pointed to by the
 				two subwindows */
-  char *windows[2];          /* two subwindows, each of which points
+  uint8_t *windows[2];          /* two subwindows, each of which points
 				to WINDOW_SIZE bytes */
   size_t offset;             /* start offset within the sliding window */
   size_t sizes[2];           /* size of each of the subwindows */
@@ -141,8 +162,8 @@
 			  and first character of the previous sliding
 			  window.  */
 		       fpr_t prev_fpr;
-		       char  prev_first_char;
+		       uint8_t prev_first_char;
 
 		       /* Message logging */
 		       chop_log_t log;);
 
@@ -189,6 +210,6 @@
    `compute_next_window_fingerprint ()', we can multiply the previous
    fingerprint by ANCHOR_PRIME_NUMBER without risking to overflow the 32-bit
    `fpr_t' type.  */
-#define ANCHOR_PRIME_NUMBER (3)
-#define ANCHOR_MODULO_MASK  (0x3fffffff)
+#define ANCHOR_PRIME_NUMBER (3U)
+#define ANCHOR_MODULO_MASK  (0x3fffffffU)
 
@@ -209,7 +230,7 @@
 /* Multiply WHAT by ANCHOR->PRIME to the ANCHOR->WINDOW_SIZE.  */
 static inline fpr_t
 multiply_with_prime_to_the_ws (chop_anchor_based_chopper_t *anchor,
-			       char what)
+			       uint8_t what)
 {
   fpr_t cached;
   unsigned idx;
@@ -337,7 +360,7 @@
     {
       size_t amount = 0;
 
-      err = chop_stream_read (input, buffer + *size,
+      err = chop_stream_read (input, (char *) buffer + *size,
 			      anchor->window_size - *size, &amount);
       *size += amount;
 
@@ -396,28 +419,22 @@
 # define INLINED
 #endif
 
-static int sliding_window_unfull (sliding_window_t *) INLINED;
-static char * sliding_window_dest_buffer (sliding_window_t *,
-					  size_t **,
-					  size_t *) INLINED;
-static int sliding_window_unfull (sliding_window_t *) INLINED;
+static uint8_t *sliding_window_dest_buffer (sliding_window_t *,
+					    size_t **,
+					    size_t *) INLINED;
 static void sliding_window_increment_offset (sliding_window_t *) INLINED;
 
 
 
 /* Return non-zero if less than WINDOW->WINDOW_SIZE bytes are available from
    WINDOW's current offset.  */
-static inline int
-sliding_window_unfull (sliding_window_t *window)
-{
-  if (window->sizes[1] > 0)
-    return (window->offset > window->sizes[1]);
-
-  if (window->sizes[0] > 0)
-    return ((window->offset > 0) || (window->sizes[0] < window->window_size));
-
-  return 1;
-}
+#define sliding_window_unfull(window)				\
+  (((window)->sizes[1] > 0)					\
+   ? ((window)->offset > (window)->sizes[1])			\
+   : (((window)->sizes[0] > 0)					\
+      ? (((window)->offset > 0)					\
+	 || ((window)->sizes[0] < (window)->window_size))	\
+      : 1))
 
 /* Return a pointer to a WINDOW->WINDOW_SIZE byte buffer.  Return in
    DEST_SIZE a pointer to this buffer's size which should be updated and be
@@ -425,12 +442,12 @@
    amount of useful data that were originally pointed to by *DEST_SIZE.  This
    may be used to flush the data pointed to by *DEST_SIZE before overwriting
    it.  */
-static inline char *
+static inline uint8_t *
 sliding_window_dest_buffer (sliding_window_t *window,
 			    size_t **dest_size,
 			    size_t *discarded)
 {
-  char *dest;
+  uint8_t *dest;
 
   if (window->sizes[0] == 0)
     {
@@ -450,7 +467,7 @@
 	{
 	  /* Discard the contents of the first window.  Make the second
 	     window the first one.  */
-	  char *new_window = window->windows[0];
+	  uint8_t *new_window = window->windows[0];
 
 	  *discarded = window->sizes[0];
 
@@ -505,7 +522,7 @@
   if (window->offset + amount >= window->sizes[0])
     {
       /* Discard the first subwindow.  */
-      char *old_window;
+      uint8_t *old_window;
 
       window->offset += amount;
       window->offset -= window->sizes[0];
@@ -531,9 +548,10 @@
   if (start_offset < window->window_size)
     {
       /* Copy from the first sub-window */
       size_t amount, available = window->sizes[0] - start_offset;
       amount = (available > size) ? size : available;
-      err = chop_buffer_append (buffer, window->windows[0] + start_offset,
+      err = chop_buffer_append (buffer,
+				(char *) window->windows[0] + start_offset,
 				amount);
       if (err)
 	return err;
@@ -555,7 +573,8 @@
 	  available = window->sizes[1];
 	  amount = (available > size) ? size : available;
 
-	  err = chop_buffer_append (buffer, window->windows[1], amount);
+	  err = chop_buffer_append (buffer, (char *) window->windows[1],
+				    amount);
 	  if (err)
 	    return err;
 	}
@@ -563,13 +582,9 @@
   else
     {
       /* Copy from the second sub-window */
-      size_t available, amount;
-
-      available = window->sizes[1];
-      amount = (available > size) ? size : available;
-
       start_offset -= window->window_size;
-      err = chop_buffer_append (buffer, window->windows[1] + start_offset,
+      err = chop_buffer_append (buffer,
+				(char *) window->windows[1] + start_offset,
 				size);
       if (err)
 	return err;
@@ -583,13 +598,13 @@
    WINDOW->WINDOW_SIZE bytes.  */
 static inline void
 sliding_window_copy_second_half (sliding_window_t *window,
-				 char *buffer, size_t *size)
+				 uint8_t *buffer, size_t *size)
 {
   memcpy (buffer, window->windows[1], window->sizes[1]);
   *size = window->sizes[1];
 }
 
-static inline const char *
+static inline const uint8_t *
 sliding_window_first_half (sliding_window_t *window)
 {
   return (window->windows[0]);
@@ -645,7 +662,7 @@
    fingerprint).  */
 static inline fpr_t
 compute_next_window_fingerprint (chop_anchor_based_chopper_t *anchor,
-				 char first_char, char last_char,
+				 uint8_t first_char, uint8_t last_char,
 				 register fpr_t fpr)
 {
 #if (defined HAVE_LIGHTNING_H) && (defined INLINE_LIGHTNING_CODE)
@@ -695,8 +712,8 @@
 			    sliding_window_t *window)
 {
   register fpr_t fpr;
-  const char *p;
-  char first_char = '\0';
+  const uint8_t *p;
+  uint8_t first_char = '\0';
   fpr_t prime_power = 1;
   size_t total = anchor->window_size;
 
@@ -849,6 +867,6 @@
   sliding_window_t *window;
   int first = 1;
-  char *window_dest;
+  uint8_t *window_dest;
   size_t start_offset, *window_dest_size;
   register fpr_t window_fpr = 0;
   register fpr_t magic_fpr_mask;
@@ -881,9 +899,10 @@
 	    {
 	      /* Flush the data we're about to discard.  */
 	      assert (discarded >= start_offset);
-	      chop_log_printf (&anchor->log, "appending %u bytes to block",
+	      chop_log_printf (&anchor->log, "appending %zu bytes to block",
 			       discarded - start_offset);
-	      err = chop_buffer_append (buffer, window_dest + start_offset,
+	      err = chop_buffer_append (buffer,
+					(char *) window_dest + start_offset,
 					discarded - start_offset);
 	      if (err)
 		return err;
@@ -895,7 +914,7 @@
 	  err = read_sliding_window (anchor, window_dest,
 				     window_dest_size);
 	  chop_log_printf (&anchor->log, "reloaded sliding window, "
-			   "got %u bytes", *window_dest_size);
+			   "got %zu bytes", *window_dest_size);
 
 	  if (CHOP_EXPECT_FALSE (err))
 	    {
@@ -923,7 +942,7 @@
 	{
 	  /* For subsequent windows, the fingerprint can be computed
 	     efficiently based on the previous fingerprint.  */
-	  register char first_char, last_char;
+	  register uint8_t first_char, last_char;
 
 	  first_char = sliding_window_first_char (window);
 	  last_char = sliding_window_last_char (window);
@@ -966,7 +985,7 @@
 	      sliding_window_skip (window, window->window_size);
 
 	      chop_log_printf (&anchor->log,
-			       "found an anchor (fpr: 0x%x, block size: %u)",
+			       "found an anchor (fpr: 0x%x, block size: %zu)",
 			       window_fpr, chop_buffer_size (buffer));
 
 	      break;
@@ -984,7 +1003,7 @@
 
       /* Flush the remaining bytes.  */
       amount = sliding_window_end_offset (window) - start_offset;
-      chop_log_printf (&anchor->log, "end of stream, flushing %u bytes left",
+      chop_log_printf (&anchor->log, "end of stream, flushing %zu bytes left",
 		       amount);
 
       err = sliding_window_append_to_buffer (window, start_offset,
